# Server para redireccionar todo el tr치fico HTTP a HTTPS
server {
    listen 80;
    server_name localhost; # O tu dominio si lo est치s usando

    return 301 https://$host$request_uri; # Redirecciona a HTTPS
}

# Server principal para el tr치fico HTTPS
server {
    listen 443 ssl;
    server_name localhost; # O tu dominio

    # Rutas a tus certificados SSL dentro del contenedor Docker
    ssl_certificate /etc/nginx/ssl/nginx-selfsigned.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx-selfsigned.key;

    # Configuraciones SSL recomendadas para mayor seguridad
    ssl_session_cache shared:SSL:10m;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256";
    ssl_prefer_server_ciphers on;

    # Ruta para los archivos est치ticos del frontend
    location / {
        root /usr/share/nginx/html;
        index index.html index.htm;
        try_files $uri $uri/ /index.html; # Permite SPAs (Single Page Applications)
    }

    # Proxy inverso para las llamadas a la API del backend
    # Todas las solicitudes que empiezan por /api/ se redirigen al servicio 'backend'
    location /api/ {
        proxy_pass http://backend:5000/; # 'backend' es el nombre del servicio en docker-compose
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        # Elimina /api/ del path antes de enviar al backend
        rewrite ^/api/(.*)$ /$1 break;
    }
}